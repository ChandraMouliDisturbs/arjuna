runid = mrunid
failfast = false
session {
	name = "msession"
}

directory {
	tests = ./tests
	sessions = ./config/sessions
	groups = ./config/groups
	report = ./report
	archives = ./archives
	runid = {
		report = {
			root = "%%slugREPORT_DIR/%%slugRUNID"
			json.raw.root = "%%slugRUNID_RPT_DIR/jdb/raw"
			json.raw.tests = "%%slugRAW_DIR/tests"
			json.raw.issues = "%%slugRAW_DIR/issues"
			json.raw.events = "%%slugRAW_DIR/events"
			json.raw.fixtures = "%%slugRAW_DIR/fixtures"
		}
	}
}

session {
	template {
		name = default_session
		file = ${session.template.name}".conf"
	}
}

assertions {
	lazy = false
}

fixture {
	testclass{
		
		setupclass {
			name = setUpClass
		}
	
		teardownclass {
			name = tearDownClass
		}
		
		setupclassinstance {
			name = setUpClassInstance
		}
	
		teardownclassinstance {
			name = tearDownClassInstance
		}
		
		setupclassfragment {
			name = setUpClassFragment
		}
	
		teardownclassfragment {
			name = tearDownClassFragment
		}
		
		setupmethod {
			name = setUpMethod
		}
	
		teardownmethod {
			name = tearDownMethod
		}
	
		setupmethodinstance {
			name = setUpMethodInstance
		}
	
		teardownmethodinstance {
			name = tearDownMethodInstance
		}
	
		setuptest {
			name = setUpTest
		}
	
		teardowntest {
			name = tearDownTest
		}
	}
}

report {
	mode = minimal
	
	name {
		format = ACTestReport
	}
	
	generators {
		builtin = [excel]
	}
	
	listeners {
		builtin = [console]
	}
	
	minimal {
		metadata.test.object.tests = [pqname, name]
		metadata.test.object.steps = [pqname, name]
		metadata.test.object.issues = [pqname, name, oname]
		metadata.test.object.fixtures = [pqname, name, oname]
		sections = [tests, issues]
		included.rtype = [pass, fail, error, excluded]	
		tests.annotated.on = false	
		tests.custom.on = false
		tests.udv.on = false
		tests.datarecord.on = false
		tests.dataref.on = false
	}
	
	basic {
		metadata.test.object.tests = [pqname, name]
		metadata.test.object.steps = [pqname, name]
		metadata.test.object.issues = [pqname, name, oname]
		metadata.test.object.fixtures = [pqname, name, oname]
		sections = [tests, steps, issues]
		included.rtype = [pass, fail, error, excluded]
		tests.annotated.on = true
		tests.custom.on = false
		tests.udv.on = false
		tests.datarecord.on = false
		tests.dataref.on = false
	}
	
	advanced {
		metadata.test.object.tests = [nname, snid, gn, pqname, cin, name, min, tn, ttime]
		metadata.test.object.steps = [nname, snid, gn, pqname, cin, name, min, tn]
		metadata.test.object.issues = [nname, snid, gn, pqname, cin, name, min, tn, oname]
		metadata.test.object.fixtures = [nname, snid, gn, pqname, cin, name, min, tn,oname]
		sections = [tests, steps, issues]
		included.rtype = [pass, fail, error, excluded]
		tests.annotated.on = true
		tests.custom.on = true
		tests.udv.on = true
		tests.datarecord.on = true
		tests.dataref.on = true
	}
	
	debug {
		metadata.test.object.tests = [nname, nid, snid, gn, pqname, cin, name, min, tn, tid, ttime, btstamp, etstamp]
		metadata.test.object.steps = [nname, snid, gn, pqname, cin, name, min, tn]
		metadata.test.object.issues = [nname, snid, gn, pqname, cin, name, min, tn, oname]
		metadata.test.object.fixtures = [nname, snid, gn, pqname, cin, name, min, tn, oname]
		sections = [tests, steps, issues, fixtures, events]
		included.rtype = [pass, fail, error, excluded, skipped, unpicked]
		tests.annotated.on = true
		tests.custom.on = true
		tests.udv.on = true
		tests.datarecord.on = true
		tests.dataref.on = true
	}
	
	metadata {
		test = [id, name, idea, priority]
	}
	
	tests {
		metadata.reportable = [result, code, desc, issue_id]
	}
	
	steps {
		metadata.reportable = [num, purpose, result, ctext, cbench, cobserve, issue_id]
	}
	
	issues {
		metadata.reportable = [id, type, sub_type, ename, emsg, etrace, step_num, fname]
	}
	
	fixtures {
		metadata.reportable = [fixture_type, fixture_method, result, issue_id, exec_point]
	}
	
	events {
		metadata.reportable = [text, component, success, remarks, exc_msg, exc_trace]
	}
}