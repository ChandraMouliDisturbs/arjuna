irunid = "%%slugInternalRunID"

project {
	tests.dir = "%%slugProjDir/tests"
	
	log.dir = "%%slugProjDir/log"
	config.dir = "%%slugProjDir/config"
	core {
		dir = "%%slugProjDir/core"
		db.central.dir = "%%slugProjDir/core/db/central"
		db.central.dbfile = "%%slugProjDir/core/db/central.ads"
		db.allrun.dir = "%%slugProjDir/core/db/run/"
		db.run.dbfile = "%%slugProjDir/core/db/run/%%slugRUNID.ads"
		db.template.dir = "%%slugProjDir/core/db/template"
		db.template.central.dbfile = "%%slugProjDir/core/db/template/ctemp.ads"
		db.template.run.dbfile = "%%slugProjDir/core/db/template/rtemp.ads"
	}
	
	data {
		root.dir = "%%slugProjDir/data"
		sources.dir = "%%slugProjDir/data/sources"
		references.dir = "%%slugProjDir/data/references"
	}
	
	screenshots.dir = "%%slugProjDir/screenshots"
	
	sessions.dir = "%%slugProjDir/config/sessions"
	groups.dir = "%%slugProjDir/config/groups"
	report.dir = "%%slugProjDir/report"
	archives.dir = "%%slugProjDir/archives"
	temp.dir = "%%slugProjDir/temp"
	run = {
		report = {
			dir = "%%slugProjDir/report/%%slugRUNID"
			jdb.dir = "%%slugProjDir/report/%%slugRUNID/jdb"
			json = {
				dir = "%%slugProjDir/report/%%slugRUNID/json"
				tests.dir = "%%slugProjDir/report/%%slugRUNID/json/tests"
				ignoredtests.dir = "%%slugProjDir/report/%%slugRUNID/json/ignored_tests"
				issues.dir = "%%slugProjDir/report/%%slugRUNID/json/issues"
				events.dir = "%%slugProjDir/report/%%slugRUNID/json/events"
				fixtures.dir = "%%slugProjDir/report/%%slugRUNID/json/fixtures"
			}
		}
	}
	
	ui {
		maps.dir = "%%slugProjDir/uiauto_maps"
		images.dir = "%%slugProjDir/uiauto_images"
	}
}

session {
	template {
		name = msession
		file = ${session.template.name}".conf"
	}
}

fixture {
	testclass{
		
		setupclass {
			name = setUpClass
		}
	
		teardownclass {
			name = tearDownClass
		}
		
		setupclassinstance {
			name = setUpClassInstance
		}
	
		teardownclassinstance {
			name = tearDownClassInstance
		}
		
		setupclassfragment {
			name = setUpClassFragment
		}
	
		teardownclassfragment {
			name = tearDownClassFragment
		}
		
		setupmethod {
			name = setUpMethod
		}
	
		teardownmethod {
			name = tearDownMethod
		}
	
		setupmethodinstance {
			name = setUpMethodInstance
		}
	
		teardownmethodinstance {
			name = tearDownMethodInstance
		}
	
		setuptest {
			name = setUpTest
		}
	
		teardowntest {
			name = tearDownTest
		}
	}
}

report {
	
	name {
		format = ArjunaTestReport
	}
	
	minimal {
		metadata.test.object.tests = [pname, cname, mname]
		metadata.test.object.steps = [pname, cname, mname]
		metadata.test.object.issues = [pname, cname, mname, oname]
		metadata.test.object.ignoredtests = [pname, cname, mname]
		metadata.test.object.fixtures = [pname, cname, mname, oname]
		sections = [tests, issues]
		included.rtype = [pass, fail, error, excluded]	
		included.ignoretype = []	
		tests.annotated.on = false	
		tests.attr.on = false
		tests.execvar.on = false
		tests.datarecord.on = false
		tests.dataref.on = false
	}
	
	basic {
		metadata.test.object.tests = [pname, cname, mname]
		metadata.test.object.steps = [pname, cname, mname]
		metadata.test.object.issues = [pname, cname, mname, oname]
		metadata.test.object.ignoredtests = [pname, cname, mname]
		metadata.test.object.fixtures = [pname, cname, mname, oname]
		sections = [tests, steps, issues]
		included.rtype = [pass, fail, error, excluded]
		included.ignoretype = []
		tests.annotated.on = true
		tests.attr.on = false
		tests.execvar.on = false
		tests.datarecord.on = false
		tests.dataref.on = false
	}
	
	advanced {
		metadata.test.object.tests = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn, ttime]
		metadata.test.object.steps = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn]
		metadata.test.object.issues = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn, oname]
		metadata.test.object.ignoredtests = [pname, cname, mname]
		metadata.test.object.fixtures = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn,oname]
		sections = [tests, steps, issues]
		included.rtype = [pass, fail, error, excluded]
		included.ignoretype = []
		tests.annotated.on = true
		tests.attr.on = true
		tests.execvar.on = true
		tests.datarecord.on = true
		tests.dataref.on = true
	}
	
	debug {
		metadata.test.object.tests = [nname, nid, snid, gn, pname, cname, cin, cfn, mname, min, tn, tid, ttime, btstamp, etstamp]
		metadata.test.object.steps = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn]
		metadata.test.object.issues = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn, oname]
		metadata.test.object.ignoredtests = [pname, cname, mname]
		metadata.test.object.fixtures = [nname, snid, gn, pname, cname, cin, cfn, mname, min, tn, oname]
		sections = [tests, steps, issues, ignored_tests, fixtures, events]
		included.rtype = [pass, fail, error, excluded]
		included.ignoretype = [skipped, unpicked]
		tests.annotated.on = true
		tests.attr.on = true
		tests.execvar.on = true
		tests.datarecord.on = true
		tests.dataref.on = true
	}
	
	metadata {
		test = [id, name, idea, priority]
	}
	
	tests {
		metadata.reportable = [result, code, desc, issue_id]
	}
	
	steps {
		metadata.reportable = [num, purpose, result, ctext, cbench, cobserve, issue_id]
	}
	
	issues {
		metadata.reportable = [id, type, sub_type, ename, emsg, etrace, step_num, fname, dsname]
	}
	
	ignoredtests {
		metadata.reportable = [status, reason]
	}
	
	fixtures {
		metadata.reportable = [fixture_type, fixture_method, result, issue_id, exec_point]
	}
	
	events {
		metadata.reportable = [text, component, success, remarks, exc_msg, exc_trace]
	}
}